import os
import subprocess
from scapy.all import sniff
from analysis_helpers import analyze_registry, analyze_file_access

def packet_callback(packet):
    if packet.haslayer('IP'):
        ip_layer = packet.getlayer('IP')
        print(f"[INFO] Packet detected: {ip_layer.src} -> {ip_layer.dst}")

# Network monitoring function
def start_network_monitor():
    print("[INFO] Starting network monitoring...")
    sniff(prn=packet_callback, count=20)

# Combined dynamic analysis (with sandbox)
def run_in_sandbox(malware_path):
    print(f"[INFO] Running {malware_path} in the sandbox...")
    
    # Start network monitoring in the background
    network_monitor = subprocess.Popen(["python", "-c", "from scapy.all import sniff; sniff(prn=lambda x: print(f'[INFO] {x.summary()}'), count=20)"])

    try:
        result = subprocess.run([malware_path], timeout=120)
        print(f"[INFO] Malware executed with exit code: {result.returncode}")
    except subprocess.TimeoutExpired:
        print("[WARNING] Malware execution timed out.")
    finally:
        # Stop network monitoring
        network_monitor.terminate()
        print("[INFO] Stopped network monitoring.")

        # Post-execution analysis
        analyze_registry()   # Analyze Windows Registry for suspicious changes
        analyze_file_access()  # Monitor file access changes

if __name__ == "__main__":
    malware_path = input("Enter the path to the malware binary: ")
    run_in_sandbox(malware_path)

import os
import platform

# Windows-specific: Registry analysis (using winreg)
if platform.system() == "Windows":
    import winreg

# Linux/Unix: File access monitoring (using pyinotify)
if platform.system() != "Windows":
    import pyinotify

def analyze_registry():
    if platform.system() == "Windows":
        try:
            registry_key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", 0, winreg.KEY_READ)
            value_count = winreg.QueryInfoKey(registry_key)[1]
            for i in range(value_count):
                name, value, _ = winreg.EnumValue(registry_key, i)
                print(f"[INFO] Registry entry: {name} -> {value}")
        except Exception as e:
            print(f"[ERROR] Error reading registry: {e}")
    else:
        print("[INFO] Registry analysis not supported on non-Windows systems.")

# Monitor file access
if platform.system() != "Windows":
    class EventHandler(pyinotify.ProcessEvent):
        def process_IN_CREATE(self, event):
            print(f"[ALERT] File created: {event.pathname}")

        def process_IN_DELETE(self, event):
            print(f"[ALERT] File deleted: {event.pathname}")

        def process_IN_MODIFY(self, event):
            print(f"[ALERT] File modified: {event.pathname}")

    def analyze_file_access():
        print("[INFO] Monitoring file access...")
        watch_manager = pyinotify.WatchManager()
        event_handler = EventHandler()
        notifier = pyinotify.Notifier(watch_manager, event_handler)

        watch_manager.add_watch("/tmp", pyinotify.IN_CREATE | pyinotify.IN_DELETE | pyinotify.IN_MODIFY)
        notifier.loop()

import os
import subprocess
import json
import shutil
import importlib
import platform

# Load sandbox settings from the isolation config file
def load_sandbox_config():
    current_dir = os.path.dirname(os.path.abspath(__file__))
    config_file = os.path.join(current_dir, "isolation_config.json")
    
    if not os.path.exists(config_file):
        raise FileNotFoundError(f"Configuration file not found at {config_file}")

    try:
        with open(config_file, 'r') as f:
            config = json.load(f)
    except json.JSONDecodeError as e:
        raise ValueError(f"Error decoding JSON from {config_file}: {e}")
    
    return config

# Load the sandbox configuration
config = load_sandbox_config()
sandbox_dir = config.get('sandbox_directory', 'default/sandbox/path')

# Create an isolated environment for malware analysis
def setup_sandbox(sandbox_dir):
    if not os.path.exists(sandbox_dir):
        os.makedirs(sandbox_dir)
    print(f"[INFO] Sandbox created at {sandbox_dir}")

# Clean up the sandbox after analysis
def clean_sandbox(sandbox_dir):
    try:
        shutil.rmtree(sandbox_dir)
        print(f"[INFO] Sandbox at {sandbox_dir} cleaned up.")
    except Exception as e:
        print(f"[ERROR] Failed to clean sandbox: {e}")

# Run the malware binary in the sandbox
def execute_in_sandbox(malware_path, sandbox_dir, config):
    print(f"[INFO] Executing {malware_path} in the sandbox at {sandbox_dir}")
    
    # Copy malware to the sandbox
    sandbox_malware_path = os.path.join(sandbox_dir, os.path.basename(malware_path))
    shutil.copy(malware_path, sandbox_malware_path)
    
    # Execute the malware in the sandbox environment
    try:
        result = subprocess.run([sandbox_malware_path], timeout=config['timeout'])
        print(f"[INFO] Malware executed with exit code: {result.returncode}")
    except subprocess.TimeoutExpired:
        print("[WARNING] Malware execution timed out.")
    except Exception as e:
        print(f"[ERROR] Failed to execute malware: {e}")

# Main script execution
if __name__ == "__main__":
    try:
        malware_path = input("Enter the path to the malware binary: ")
        setup_sandbox(sandbox_dir)
        
        execute_in_sandbox(malware_path, sandbox_dir, config)
        
        # Import and run static analysis
        print("[INFO] Running static analysis...")
        static_analysis = importlib.import_module('toolkit.static_analysis')
        static_analysis.perform_static_analysis(malware_path)

        # Run dynamic analysis
        print("[INFO] Running dynamic analysis...")
        dynamic_analysis = importlib.import_module('toolkit.dynamic_analysis')
        dynamic_analysis.dynamic_analysis(malware_path)

        # Analyze registry (if on Windows)
        if platform.system() == "Windows":
            print("[INFO] Analyzing registry...")
            analysis_helpers = importlib.import_module('toolkit.analysis_helpers')
            analysis_helpers.analyze_registry()

    finally:
        clean_sandbox(sandbox_dir)
